/*
 * THIS C FILE GENERATED BY RAGEL - DO NOT EDIT!
 * Ragel State Machine Compiler: http://www.complang.org/ragel/
 * Source: http://www.complang.org/ragel/ragel-6.5.tar.gz
 */

%%{
	machine params;
	access cmd->;
	
	# A buffer to collect argurments
	
	# Append to the buffer
	action append {
		if (cmd->buflen < BUFLEN) {
			cmd->buf[cmd->buflen++] = fc;
		}
	}
	
	# Terminate a buffer
	action term {
		if (cmd->buflen < BUFLEN) {
			cmd->buf[cmd->buflen++] = '\0';
		}
	}
	
	# Clear out the buffer
	action clear { cmd->buflen = 0; }
	
	# Argument actions
	
	action buffer {
		char *multiplier;
		cmd->buffer_size = strtol(cmd->buf, &multiplier, 10);
		if (multiplier && *multiplier == 'K') {
			cmd->buffer_size *= 1024;
		}
	}
	
	action chart {
		if (strstr(cmd->buf, "daily")) {
			cmd->value = 86400;
		}
		if (strstr(cmd->buf, "hourly")) {
			cmd->value = 3600;
		}
		if (strstr(cmd->buf, "profile-access")) {
			cmd->chart |= PROFILEACCESSCHART;
		}
		if (strstr(cmd->buf, "system-resources")) {
			cmd->chart |= SYSTEMRESOURCESCHART;
		}
		if (strstr(cmd->buf, "temperature")) {
			cmd->chart |= TEMPERATURECHART;
		}
	}
	
	action dir { strcpy(cmd->dir, cmd->buf); }
	
	action format {
		if (strcmp(cmd->buf, "text") == 0) {
			cmd->format = TEXTFORMAT;
		}
		if (strcmp(cmd->buf, "xml") == 0) {
			cmd->format = XMLFORMAT;
		}
	}
	
	action help {
		printf("logfile version %s\n\n", VERSION);
		printf("    -b -B    --buffer     the size of the buffer in bytes, or in K where specified (e.g. 64K)\n\n");
		printf("    -c -C    --chart      [ daily- | hourly- ] profile-access | system-resources | temperature (not implemented)\n\n");
		printf("    -d -D    --dir        path to logfile directory\n\n");
		printf("    -f -F    --format     [ text | xml ]\n\n");
		printf("    -h -H -? --help       display this help\n\n");
		printf("    -k -K    --skip       skip this many records before starting a page\n\n");
		printf("    -l -L    --limit      limit each page size to this many records\n\n");
		printf("    -n -N    --name       specify logfile name for testing\n\n");
		printf("                          Important Notice: log entries in httpd error_log\n");
		printf("                          without a timestamp - it is possible - are skipped\n\n");
		printf("    -p -P    --pattern    simple regular expression:\n\n");
		printf("                          c Matches any literal character c\n");
		printf("                          . (period) Matches any single character\n");
		printf("                          ^ Matches the beginning of the input string\n");
		printf("                          $ Matches the end of the input string\n");
		printf("                          * Matches zero or more occurrences of the previous character\n\n");
		printf("    -r -R    --rank       rank this many top items (not implemented)\n\n");
		printf("    -s -S    --start      start processing at this time\n\n");
		printf("    -t -T    --stop       stop processing at this time (inclusive)\n\n");
		printf("    -u -U    --until      process until this time (exclusive)\n\n");
		printf("    -v       --version    display the version\n\n");
		printf("    -z -Z    --tzoffset   time zone offset\n\n");
	}
	
	action limit { cmd->limit = strtol(cmd->buf, NULL, 10); }
	
	action name {
		// Examples:
		// access_log, error_log
		// sms_80_access_log, sms_443_access_log
		// nmpb-client.log, nmpb-installer.log, nmpb-player.log
		strcpy(cmd->name, cmd->buf);
		strcat(cmd->name_format, cmd->name);
	}
	
	action pattern { strcpy(cmd->pattern, cmd->buf); }
	
	action rank { cmd->rank = strtol(cmd->buf, NULL, 10); }
	
	action skip { cmd->skip = strtol(cmd->buf, NULL, 10); }
	
	action start { cmd->start_time = cmd->time; }
	
	action stop { cmd->stop_time = cmd->time; }
	
	action time {
		cmd->timestamp.tm_mon = cmd->timestamp.tm_mday = 1;
		cmd->timestamp.tm_hour = cmd->timestamp.tm_min = cmd->timestamp.tm_sec = 0;
		sscanf(cmd->buf, "%4d%2d%2d%2d%2d%2d", 
			&cmd->timestamp.tm_year, &cmd->timestamp.tm_mon, &cmd->timestamp.tm_mday, 
			&cmd->timestamp.tm_hour, &cmd->timestamp.tm_min, &cmd->timestamp.tm_sec);
		cmd->timestamp.tm_year -= 1900;
		cmd->timestamp.tm_mon -= 1;
		cmd->timestamp.tm_isdst = 0;
		cmd->timestamp.tm_gmtoff = 0;
		cmd->time = timegm(&cmd->timestamp);
	}
	
	action timezoneoffset {
		char sign;
		int hours, minutes;
		sscanf(cmd->buf, "%1c%2d%2d", &sign, &hours, &minutes);
		cmd->timezoneoffset = ((hours % 12) * 3600) + ((minutes % 60) * 60);
		cmd->timezoneoffset = (sign == '-') ? -cmd->timezoneoffset : cmd->timezoneoffset;
		if (cmd->timezoneoffset) {
			sprintf(cmd->tzoffset, "%c%02d%02d", sign, hours % 12, minutes % 60);
		}
	}
	
	action until { cmd->stop_time = cmd->time - 1; }
	
	action version { printf("logfile version %s\n\n", VERSION); }
	
	# Helpers that collect strings
	string = [^\0]+ >clear $append %term;
	
	# Helpers that collect and validate various time and timezoneoffset strings
	time = ( digit{4,14} ) >clear $append %term;
	timezoneoffset = ( ( '+' | '-' ) digit{4} ) >clear $append %term;
	
	# Different arguments
	buffer = ( '-b' | '-B' | '--buffer' ) 0? string 0 @buffer;
	chart = ( '-c' | '-C' | '--chart' ) 0? string 0 @chart;
	dir = ( '-d' | '-D' | '--dir' ) 0? string 0 @dir;
	format = ( '-f' | '-F' | '--format' ) 0? string 0 @format;
	help = ( '-h' | '-H' | '-?' | '--help' ) 0 @help;
	limit = ( '-l' | '-L' | '--limit' ) 0? string 0 @limit;
	name = ( '-n' | '-N' | '--name' ) 0? string 0 @name;
	pattern = ( '-p' | '-P' | '--pattern' ) 0? string 0 @pattern;
	rank = ( '-r' | '-R' | '--rank' ) 0? string 0 @rank;
	skip = ( '-k' | '-K' | '--skip' ) 0? string 0 @skip;
	start = ( '-s' | '-S' | '--start' ) 0? time 0 @time @start;
	stop = ( '-t' | '-T' | '--stop' ) 0? time 0 @time @stop;
	tzoffset = ( '-z' | '-Z' | '--tzoffset' ) 0? timezoneoffset 0 @timezoneoffset;
	until = ( '-u' | '-U' | '--until' ) 0? time 0 @time @until;
	version = ( '-v' | '--version' ) 0 @version;
	
	main := ( 
		buffer | 
		chart | 
		dir | 
		format | 
		help | 
		limit | 
		name | 
		pattern | 
		rank | 
		skip | 
		start | 
		stop | 
		tzoffset | 
		until | 
		version 
	)*;
}%%

%% write data;

void params_init(Command *cmd)
{
	// Application Arguments
	cmd->buffer_size = 2048; // smaller buffers are faster but risk not fitting a full log line
	cmd->chart = 0;
	strcpy(cmd->dir, "");
	cmd->format = 0;
	cmd->limit = 0;
	strcpy(cmd->name, "");
	strcpy(cmd->name_format, "%4d%2d%2d%2d%2d%2d-%4d%2d%2d%2d%2d%2d.");
	strcpy(cmd->pattern, "");
	cmd->rank = 0;
	cmd->skip = 0;
	cmd->start_time = 0;
	cmd->stop_time = 0;
	strcpy(cmd->tzoffset, "");
	
	// Application Variables
	cmd->buffer = NULL;
// 	cmd->idx_file = NULL;
// 	cmd->log_file = NULL;
	cmd->marker = 0;
	cmd->offset = 0;
	cmd->offset_size = sizeof(cmd->offset);
	cmd->timestamp.tm_gmtoff = 0;
	cmd->timestamp.tm_isdst = 0;
	cmd->timezoneoffset = 0;
	cmd->value = 0;
	
	// Ragel Variables
	cmd->buflen = 0;
	%% write init;
}

void params_execute(Command *cmd, const char *data, int len)
{
	const char *p = data;
	const char *pe = data + len;
	
	%% write exec;
}

int params_finish(Command *cmd)
{
	if (cmd->cs == params_error) {
		return -1;
	}
	if (cmd->cs >= params_first_final) {
		return 1;
	}
	return 0;
}

void params_cleanup(Command *cmd)
{
	if (cmd->buffer) {
		free(cmd->buffer);
		cmd->buffer = NULL;
	}
// 	if (cmd->idx_file) {
// 		fclose(cmd->idx_file);
// 		cmd->idx_file = NULL;
// 	}
// 	if (cmd->log_file) {
// 		fclose(cmd->log_file);
// 		cmd->log_file = NULL;
// 	}
}

int params(Command *cmd, int argc, char **argv)
{
	int index;
	int result = 0;
	
	params_init(cmd);
	
	for (index = 1; index < argc; index++) {
		/* fprintf(stderr, "logfile: argument[%d] = %s\n", index, argv[index]); */
		params_execute(cmd, argv[index], strlen(argv[index])+1);
	}
	
	if (params_finish(cmd) != 1) {
		fprintf(stderr, "logfile: error processing arguments\n");
		return 1;
	}
	
	cmd->buffer = malloc(cmd->buffer_size);
	if (cmd->buffer == NULL) {
		fprintf(stderr, "logfile: could not allocate buffer (%ld)\n", cmd->buffer_size);
		return 1;
	}
	
// 	if (strlen(cmd->name)) {
// 		strcpy(cmd->buf, cmd->name);
// 		strcat(cmd->buf, ".idx");
// 		cmd->idx_file = fopen(cmd->buf, cmd->limit ? "rb" : "wb");
// 		if (cmd->idx_file == NULL) {
// 			fprintf(stderr, "logfile: could not open index file (%s)\n", cmd->buf);
// 			return 1;
// 		}
// 		strcpy(cmd->buf, cmd->name);
// 		strcat(cmd->buf, ".log");
// 		cmd->log_file = fopen(cmd->buf, cmd->limit ? "rb" : "wb");
// 		if (cmd->log_file == NULL) {
// 			fprintf(stderr, "logfile: could not open log file (%s)\n", cmd->buf);
// 			return 1;
// 		}
// 	}
	
	cmd->start_time -= cmd->timezoneoffset;
	cmd->stop_time -= cmd->timezoneoffset;
	
	return 0;
}
